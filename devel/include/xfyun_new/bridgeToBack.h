// Generated by gencpp from file xfyun_new/bridgeToBack.msg
// DO NOT EDIT!


#ifndef XFYUN_NEW_MESSAGE_BRIDGETOBACK_H
#define XFYUN_NEW_MESSAGE_BRIDGETOBACK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace xfyun_new
{
template <class ContainerAllocator>
struct bridgeToBack_
{
  typedef bridgeToBack_<ContainerAllocator> Type;

  bridgeToBack_()
    : state(0)
    , content()  {
    }
  bridgeToBack_(const ContainerAllocator& _alloc)
    : state(0)
    , content(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _state_type;
  _state_type state;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _content_type;
  _content_type content;





  typedef boost::shared_ptr< ::xfyun_new::bridgeToBack_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::xfyun_new::bridgeToBack_<ContainerAllocator> const> ConstPtr;

}; // struct bridgeToBack_

typedef ::xfyun_new::bridgeToBack_<std::allocator<void> > bridgeToBack;

typedef boost::shared_ptr< ::xfyun_new::bridgeToBack > bridgeToBackPtr;
typedef boost::shared_ptr< ::xfyun_new::bridgeToBack const> bridgeToBackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::xfyun_new::bridgeToBack_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::xfyun_new::bridgeToBack_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::xfyun_new::bridgeToBack_<ContainerAllocator1> & lhs, const ::xfyun_new::bridgeToBack_<ContainerAllocator2> & rhs)
{
  return lhs.state == rhs.state &&
    lhs.content == rhs.content;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::xfyun_new::bridgeToBack_<ContainerAllocator1> & lhs, const ::xfyun_new::bridgeToBack_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace xfyun_new

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::xfyun_new::bridgeToBack_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::xfyun_new::bridgeToBack_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::xfyun_new::bridgeToBack_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::xfyun_new::bridgeToBack_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::xfyun_new::bridgeToBack_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::xfyun_new::bridgeToBack_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::xfyun_new::bridgeToBack_<ContainerAllocator> >
{
  static const char* value()
  {
    return "53c8c8d6cb18826e9166d1d2c8b0d1f2";
  }

  static const char* value(const ::xfyun_new::bridgeToBack_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x53c8c8d6cb18826eULL;
  static const uint64_t static_value2 = 0x9166d1d2c8b0d1f2ULL;
};

template<class ContainerAllocator>
struct DataType< ::xfyun_new::bridgeToBack_<ContainerAllocator> >
{
  static const char* value()
  {
    return "xfyun_new/bridgeToBack";
  }

  static const char* value(const ::xfyun_new::bridgeToBack_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::xfyun_new::bridgeToBack_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 state\n"
"string content\n"
"\n"
;
  }

  static const char* value(const ::xfyun_new::bridgeToBack_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::xfyun_new::bridgeToBack_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.state);
      stream.next(m.content);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct bridgeToBack_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::xfyun_new::bridgeToBack_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::xfyun_new::bridgeToBack_<ContainerAllocator>& v)
  {
    s << indent << "state: ";
    Printer<int32_t>::stream(s, indent + "  ", v.state);
    s << indent << "content: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.content);
  }
};

} // namespace message_operations
} // namespace ros

#endif // XFYUN_NEW_MESSAGE_BRIDGETOBACK_H
