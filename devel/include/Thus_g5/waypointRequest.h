// Generated by gencpp from file Thus_g5/waypointRequest.msg
// DO NOT EDIT!


#ifndef THUS_G5_MESSAGE_WAYPOINTREQUEST_H
#define THUS_G5_MESSAGE_WAYPOINTREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace Thus_g5
{
template <class ContainerAllocator>
struct waypointRequest_
{
  typedef waypointRequest_<ContainerAllocator> Type;

  waypointRequest_()
    : op(0)
    , name()
    , pos_x(0.0)
    , pos_y(0.0)
    , ori_z(0.0)
    , ori_w(0.0)  {
    }
  waypointRequest_(const ContainerAllocator& _alloc)
    : op(0)
    , name(_alloc)
    , pos_x(0.0)
    , pos_y(0.0)
    , ori_z(0.0)
    , ori_w(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _op_type;
  _op_type op;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef float _pos_x_type;
  _pos_x_type pos_x;

   typedef float _pos_y_type;
  _pos_y_type pos_y;

   typedef float _ori_z_type;
  _ori_z_type ori_z;

   typedef float _ori_w_type;
  _ori_w_type ori_w;





  typedef boost::shared_ptr< ::Thus_g5::waypointRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::Thus_g5::waypointRequest_<ContainerAllocator> const> ConstPtr;

}; // struct waypointRequest_

typedef ::Thus_g5::waypointRequest_<std::allocator<void> > waypointRequest;

typedef boost::shared_ptr< ::Thus_g5::waypointRequest > waypointRequestPtr;
typedef boost::shared_ptr< ::Thus_g5::waypointRequest const> waypointRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::Thus_g5::waypointRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::Thus_g5::waypointRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::Thus_g5::waypointRequest_<ContainerAllocator1> & lhs, const ::Thus_g5::waypointRequest_<ContainerAllocator2> & rhs)
{
  return lhs.op == rhs.op &&
    lhs.name == rhs.name &&
    lhs.pos_x == rhs.pos_x &&
    lhs.pos_y == rhs.pos_y &&
    lhs.ori_z == rhs.ori_z &&
    lhs.ori_w == rhs.ori_w;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::Thus_g5::waypointRequest_<ContainerAllocator1> & lhs, const ::Thus_g5::waypointRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace Thus_g5

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::Thus_g5::waypointRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::Thus_g5::waypointRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::Thus_g5::waypointRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::Thus_g5::waypointRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::Thus_g5::waypointRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::Thus_g5::waypointRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::Thus_g5::waypointRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "717d7f3271268830bf3243b29d9a7649";
  }

  static const char* value(const ::Thus_g5::waypointRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x717d7f3271268830ULL;
  static const uint64_t static_value2 = 0xbf3243b29d9a7649ULL;
};

template<class ContainerAllocator>
struct DataType< ::Thus_g5::waypointRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Thus_g5/waypointRequest";
  }

  static const char* value(const ::Thus_g5::waypointRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::Thus_g5::waypointRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 op\n"
"string name\n"
"float32 pos_x\n"
"float32 pos_y\n"
"float32 ori_z\n"
"float32 ori_w\n"
;
  }

  static const char* value(const ::Thus_g5::waypointRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::Thus_g5::waypointRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.op);
      stream.next(m.name);
      stream.next(m.pos_x);
      stream.next(m.pos_y);
      stream.next(m.ori_z);
      stream.next(m.ori_w);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct waypointRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::Thus_g5::waypointRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::Thus_g5::waypointRequest_<ContainerAllocator>& v)
  {
    s << indent << "op: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.op);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    s << indent << "pos_x: ";
    Printer<float>::stream(s, indent + "  ", v.pos_x);
    s << indent << "pos_y: ";
    Printer<float>::stream(s, indent + "  ", v.pos_y);
    s << indent << "ori_z: ";
    Printer<float>::stream(s, indent + "  ", v.ori_z);
    s << indent << "ori_w: ";
    Printer<float>::stream(s, indent + "  ", v.ori_w);
  }
};

} // namespace message_operations
} // namespace ros

#endif // THUS_G5_MESSAGE_WAYPOINTREQUEST_H
