// Generated by gencpp from file Thus_g5/create_mapRequest.msg
// DO NOT EDIT!


#ifndef THUS_G5_MESSAGE_CREATE_MAPREQUEST_H
#define THUS_G5_MESSAGE_CREATE_MAPREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace Thus_g5
{
template <class ContainerAllocator>
struct create_mapRequest_
{
  typedef create_mapRequest_<ContainerAllocator> Type;

  create_mapRequest_()
    : name()
    , file_path()
    , image_path()  {
    }
  create_mapRequest_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , file_path(_alloc)
    , image_path(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _file_path_type;
  _file_path_type file_path;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _image_path_type;
  _image_path_type image_path;





  typedef boost::shared_ptr< ::Thus_g5::create_mapRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::Thus_g5::create_mapRequest_<ContainerAllocator> const> ConstPtr;

}; // struct create_mapRequest_

typedef ::Thus_g5::create_mapRequest_<std::allocator<void> > create_mapRequest;

typedef boost::shared_ptr< ::Thus_g5::create_mapRequest > create_mapRequestPtr;
typedef boost::shared_ptr< ::Thus_g5::create_mapRequest const> create_mapRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::Thus_g5::create_mapRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::Thus_g5::create_mapRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::Thus_g5::create_mapRequest_<ContainerAllocator1> & lhs, const ::Thus_g5::create_mapRequest_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.file_path == rhs.file_path &&
    lhs.image_path == rhs.image_path;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::Thus_g5::create_mapRequest_<ContainerAllocator1> & lhs, const ::Thus_g5::create_mapRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace Thus_g5

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::Thus_g5::create_mapRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::Thus_g5::create_mapRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::Thus_g5::create_mapRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::Thus_g5::create_mapRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::Thus_g5::create_mapRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::Thus_g5::create_mapRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::Thus_g5::create_mapRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bfa8407ff3f296085108a6bfcbfc20e9";
  }

  static const char* value(const ::Thus_g5::create_mapRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbfa8407ff3f29608ULL;
  static const uint64_t static_value2 = 0x5108a6bfcbfc20e9ULL;
};

template<class ContainerAllocator>
struct DataType< ::Thus_g5::create_mapRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Thus_g5/create_mapRequest";
  }

  static const char* value(const ::Thus_g5::create_mapRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::Thus_g5::create_mapRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string name\n"
"string file_path\n"
"string image_path\n"
;
  }

  static const char* value(const ::Thus_g5::create_mapRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::Thus_g5::create_mapRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.file_path);
      stream.next(m.image_path);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct create_mapRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::Thus_g5::create_mapRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::Thus_g5::create_mapRequest_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    s << indent << "file_path: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.file_path);
    s << indent << "image_path: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.image_path);
  }
};

} // namespace message_operations
} // namespace ros

#endif // THUS_G5_MESSAGE_CREATE_MAPREQUEST_H
